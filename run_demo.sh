#!/bin/bash

echo "üéµ –ó–∞–ø—É—Å–∫ Voice Transformer Demo —Å NPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π..."
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
OS=$(uname -s)
ARCH=$(uname -m)

echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
echo "  ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $OS ($ARCH)"

if [[ "$OS" == "Darwin" && "$ARCH" == "arm64" ]]; then
    echo "  ‚Ä¢ NPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ‚úÖ Apple Silicon Neural Engine"
    echo "  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: Core ML + Core Audio"
else
    echo "  ‚Ä¢ NPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ‚ùå CPU fallback —Ä–µ–∂–∏–º"
    echo "  ‚Ä¢ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞: ALSA (Linux) / WASAPI (Windows)"
fi

echo ""
echo "üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:"
echo "  ‚Ä¢ –ì–æ–ª–æ—Å-–ß–µ–π–Ω–∂–µ—Ä: DSP ‚Üí NPU ‚Üí Post-processing"
echo "  ‚Ä¢ AI —ç—Ñ—Ñ–µ–∫—Ç—ã: –†–æ–±–æ—Ç, –î–µ–º–æ–Ω, –ü—Ä–∏—à–µ–ª–µ—Ü"
echo "  ‚Ä¢ DSP —ç—Ñ—Ñ–µ–∫—Ç—ã: –ú–æ–Ω—Å—Ç—Ä, –ü–µ—â–µ—Ä–∞, –†–∞—Ü–∏—è –∏ –¥—Ä."
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
PORT=8080
while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; do
    PORT=$((PORT+1))
done

echo "üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $PORT..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
RUST_LIB=""
if [[ -f "dsp_core/target/release/libdsp_core.so" ]]; then
    RUST_LIB="libdsp_core.so"
elif [[ -f "dsp_core/target/release/libdsp_core.dylib" ]]; then
    RUST_LIB="libdsp_core.dylib"
elif [[ -f "dsp_core/target/release/libdsp_core.dll" ]]; then
    RUST_LIB="libdsp_core.dll"
fi

if [[ -n "$RUST_LIB" ]]; then
    echo "‚úÖ Rust DSP —è–¥—Ä–æ: $RUST_LIB"
else
    echo "‚ö†Ô∏è  Rust DSP —è–¥—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ: cd dsp_core && cargo build --release)"
fi

echo ""
echo "üöÄ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ http://localhost:$PORT –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
echo ""
echo "üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
echo "  1. –ù–∞–∂–º–∏—Ç–µ 'Initialize Audio' –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
echo "  2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É"
echo "  3. –í—ã–±–µ—Ä–∏—Ç–µ '–ì–æ–ª–æ—Å-–ß–µ–π–Ω–∂–µ—Ä' –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
echo "  4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –Ω–∞–≥—Ä—É–∑–∫–æ–π CPU/GPU/NPU –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
if command -v python3 &> /dev/null; then
    echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python 3 –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"
    cd frontend && python3 -m http.server $PORT
elif command -v python &> /dev/null; then
    echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python 2 –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"
    cd frontend && python -m SimpleHTTPServer $PORT
elif command -v node &> /dev/null && command -v npx &> /dev/null; then
    echo "üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Node.js –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"
    cd frontend && npx http-server -p $PORT
else
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."
    echo ""
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑:"
    echo "  ‚Ä¢ Python: apt install python3 (Linux) / brew install python (macOS)"
    echo "  ‚Ä¢ Node.js: https://nodejs.org"
    echo ""
    echo "üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ—Ç–∫—Ä–æ–π—Ç–µ frontend/index.html –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    exit 1
fi