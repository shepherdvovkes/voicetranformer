#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Voice Transformer —Å NPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

set -e

echo "üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É Voice Transformer Demo —Å NPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
OS=$(uname -s)
ARCH=$(uname -m)

log_info "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"
log_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É NPU
NPU_SUPPORT="false"
if [[ "$OS" == "Darwin" && "$ARCH" == "arm64" ]]; then
    NPU_SUPPORT="true"
    log_success "Apple Silicon –æ–±–Ω–∞—Ä—É–∂–µ–Ω - NPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"
else
    log_warning "NPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Rust
if ! command -v rustc &> /dev/null; then
    log_error "Rust –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source ~/.cargo/env
else
    log_success "Rust —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(rustc --version)"
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é DSP —è–¥—Ä–∞
cd dsp_core

log_info "–°–±–æ—Ä–∫–∞ Rust —è–¥—Ä–∞..."

# –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏
if [[ "$NPU_SUPPORT" == "true" ]]; then
    log_info "–°–±–æ—Ä–∫–∞ —Å AI —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –¥–ª—è Apple Silicon..."
    cargo build --release --features ai-effects
else
    log_info "–°–±–æ—Ä–∫–∞ –±–µ–∑ AI —ç—Ñ—Ñ–µ–∫—Ç–æ–≤..."
    cargo build --release
fi

if [[ $? -eq 0 ]]; then
    log_success "Rust —è–¥—Ä–æ —Å–æ–±—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"
else
    log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Rust —è–¥—Ä–∞"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
cargo test --release

if [[ $? -eq 0 ]]; then
    log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
else
    log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
fi

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd ..

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
log_info "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
if ! command -v python3 &> /dev/null; then
    log_warning "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥"
fi

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ —Å–±–æ—Ä–∫–µ
cat > build_info.json << EOF
{
  "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "platform": "$OS",
  "architecture": "$ARCH",
  "npu_support": $NPU_SUPPORT,
  "rust_version": "$(rustc --version)",
  "features": {
    "ai_effects": $NPU_SUPPORT,
    "low_latency": true,
    "multi_platform": true
  }
}
EOF

log_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ build_info.json"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ
cat > run_demo.sh << 'EOF'
#!/bin/bash

echo "üéµ –ó–∞–ø—É—Å–∫ Voice Transformer Demo..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
PORT=8080
while lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; do
    PORT=$((PORT+1))
done

echo "üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $PORT..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
if command -v python3 &> /dev/null; then
    cd frontend && python3 -m http.server $PORT
elif command -v python &> /dev/null; then
    cd frontend && python -m SimpleHTTPServer $PORT
elif command -v node &> /dev/null && command -v npx &> /dev/null; then
    cd frontend && npx http-server -p $PORT
else
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –∏–ª–∏ Node.js"
    echo "üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –æ—Ç–∫—Ä–æ–π—Ç–µ frontend/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    exit 1
fi
EOF

chmod +x run_demo.sh

log_success "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω: ./run_demo.sh"

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
echo ""
echo "üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
echo "  ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $OS ($ARCH)"
echo "  ‚Ä¢ NPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞: $([[ "$NPU_SUPPORT" == "true" ]] && echo "‚úÖ –î–∞" || echo "‚ùå –ù–µ—Ç")"
echo "  ‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: $(ls -la dsp_core/target/release/libdsp_core.* 2>/dev/null | head -1 | awk '{print $9}' | xargs basename 2>/dev/null || echo "–°–æ–±—Ä–∞–Ω–æ")"
echo ""
echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "   ./run_demo.sh"
echo ""
echo "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:"
echo "  ‚Ä¢ –ì–æ–ª–æ—Å-–ß–µ–π–Ω–∂–µ—Ä (DSP ‚Üí NPU ‚Üí Post-processing)"
echo "  ‚Ä¢ AI —ç—Ñ—Ñ–µ–∫—Ç—ã (–†–æ–±–æ—Ç, –î–µ–º–æ–Ω, –ü—Ä–∏—à–µ–ª–µ—Ü)"
echo "  ‚Ä¢ DSP —ç—Ñ—Ñ–µ–∫—Ç—ã (–ú–æ–Ω—Å—Ç—Ä, –ü–µ—â–µ—Ä–∞, –†–∞—Ü–∏—è –∏ –¥—Ä.)"
echo ""

if [[ "$NPU_SUPPORT" == "true" ]]; then
    echo "üß† NPU –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:"
    echo "  ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è Core ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    echo "  ‚Ä¢ –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (< 10ms)"
    echo "  ‚Ä¢ –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
else
    echo "üíª CPU —Ä–µ–∂–∏–º:"
    echo "  ‚Ä¢ Fallback CPU –æ–±—Ä–∞–±–æ—Ç–∫–∞"
    echo "  ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –≤—Å–µ–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"
    echo "  ‚Ä¢ –°–∏–º—É–ª—è—Ü–∏—è NPU –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
fi

echo ""
log_success "–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üéµ"