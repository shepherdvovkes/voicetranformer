// Windows –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
use super::PlatformAudio;

/// –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Windows —Å WASAPI
pub struct WasapiPlatform {
    sample_rate: f32,
    buffer_size: usize,
    is_running: bool,
}

#[derive(Debug)]
pub enum WasapiError {
    InitializationFailed(String),
    ComError(String),
    DeviceNotFound,
    UnsupportedFormat,
}

impl std::fmt::Display for WasapiError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WasapiError::InitializationFailed(msg) => write!(f, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", msg),
            WasapiError::ComError(msg) => write!(f, "–û—à–∏–±–∫–∞ COM: {}", msg),
            WasapiError::DeviceNotFound => write!(f, "–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
            WasapiError::UnsupportedFormat => write!(f, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"),
        }
    }
}

impl std::error::Error for WasapiError {}

impl PlatformAudio for WasapiPlatform {
    type Error = WasapiError;

    fn initialize() -> Result<Self, Self::Error> {
        println!("ü™ü –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WASAPI –Ω–∞ Windows...");
        
        #[cfg(target_os = "windows")]
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WASAPI
            println!("‚úÖ WASAPI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            Ok(WasapiPlatform {
                sample_rate: 44100.0,
                buffer_size: 512,
                is_running: false,
            })
        }
        
        #[cfg(not(target_os = "windows"))]
        {
            Err(WasapiError::InitializationFailed(
                "–ù–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –¥–ª—è Windows".to_string(),
            ))
        }
    }

    fn get_sample_rate(&self) -> f32 {
        self.sample_rate
    }

    fn get_buffer_size(&self) -> usize {
        self.buffer_size
    }

    fn start(&mut self) -> Result<(), Self::Error> {
        if self.is_running {
            return Ok(());
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ WASAPI –ø–æ—Ç–æ–∫–∞
        self.is_running = true;
        println!("üéµ WASAPI –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω");
        Ok(())
    }

    fn stop(&mut self) -> Result<(), Self::Error> {
        if !self.is_running {
            return Ok(());
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ WASAPI –ø–æ—Ç–æ–∫–∞
        self.is_running = false;
        println!("üõë WASAPI –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        Ok(())
    }

    fn supports_low_latency(&self) -> bool {
        true // WASAPI –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∏–∑–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    }

    fn platform_info(&self) -> String {
        format!(
            "Windows WASAPI (SR: {:.0} –ì—Ü, Buffer: {} —Å—ç–º–ø–ª–æ–≤)",
            self.sample_rate, self.buffer_size
        )
    }
}