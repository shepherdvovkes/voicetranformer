// Linux –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
use super::PlatformAudio;

#[cfg(target_os = "linux")]
use alsa::{Direction, PCM};

/// –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Linux —Å ALSA
pub struct AlsaPlatform {
    sample_rate: f32,
    buffer_size: usize,
    is_running: bool,
    #[cfg(target_os = "linux")]
    pcm: Option<PCM>,
}

#[derive(Debug)]
pub enum AlsaError {
    InitializationFailed(String),
    AlsaError(String),
    DeviceNotFound,
    UnsupportedFormat,
}

impl std::fmt::Display for AlsaError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            AlsaError::InitializationFailed(msg) => write!(f, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", msg),
            AlsaError::AlsaError(msg) => write!(f, "–û—à–∏–±–∫–∞ ALSA: {}", msg),
            AlsaError::DeviceNotFound => write!(f, "–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
            AlsaError::UnsupportedFormat => write!(f, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"),
        }
    }
}

impl std::error::Error for AlsaError {}

impl PlatformAudio for AlsaPlatform {
    type Error = AlsaError;

    fn initialize() -> Result<Self, Self::Error> {
        println!("üêß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ALSA –Ω–∞ Linux...");
        
        #[cfg(target_os = "linux")]
        {
            match setup_alsa_pcm() {
                Ok(pcm) => {
                    println!("‚úÖ ALSA —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    Ok(AlsaPlatform {
                        sample_rate: 44100.0,
                        buffer_size: 512,
                        is_running: false,
                        pcm: Some(pcm),
                    })
                }
                Err(e) => Err(AlsaError::InitializationFailed(e.to_string())),
            }
        }
        
        #[cfg(not(target_os = "linux"))]
        {
            Err(AlsaError::InitializationFailed(
                "–ù–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –¥–ª—è Linux".to_string(),
            ))
        }
    }

    fn get_sample_rate(&self) -> f32 {
        self.sample_rate
    }

    fn get_buffer_size(&self) -> usize {
        self.buffer_size
    }

    fn start(&mut self) -> Result<(), Self::Error> {
        if self.is_running {
            return Ok(());
        }

        #[cfg(target_os = "linux")]
        {
            if let Some(ref pcm) = self.pcm {
                pcm.prepare().map_err(|e| {
                    AlsaError::AlsaError(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å PCM: {}", e))
                })?;
            }
        }

        self.is_running = true;
        println!("üéµ ALSA –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω");
        Ok(())
    }

    fn stop(&mut self) -> Result<(), Self::Error> {
        if !self.is_running {
            return Ok(());
        }

        #[cfg(target_os = "linux")]
        {
            if let Some(ref pcm) = self.pcm {
                pcm.drop().map_err(|e| {
                    AlsaError::AlsaError(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PCM: {}", e))
                })?;
            }
        }

        self.is_running = false;
        println!("üõë ALSA –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        Ok(())
    }

    fn supports_low_latency(&self) -> bool {
        true // ALSA –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∏–∑–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
    }

    fn platform_info(&self) -> String {
        format!(
            "Linux ALSA (SR: {:.0} –ì—Ü, Buffer: {} —Å—ç–º–ø–ª–æ–≤)",
            self.sample_rate, self.buffer_size
        )
    }
}

impl AlsaPlatform {
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub fn set_buffer_size(&mut self, buffer_size: usize) -> Result<(), AlsaError> {
        self.buffer_size = buffer_size;
        println!("üìä –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ ALSA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {} —Å—ç–º–ø–ª–æ–≤", buffer_size);
        Ok(())
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    pub fn list_devices(&self) -> Vec<String> {
        #[cfg(target_os = "linux")]
        {
            // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ALSA
            vec![
                "default".to_string(),
                "hw:0,0".to_string(),
                "plughw:0,0".to_string(),
            ]
        }
        
        #[cfg(not(target_os = "linux"))]
        {
            vec![]
        }
    }
}

/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ALSA PCM —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
#[cfg(target_os = "linux")]
fn setup_alsa_pcm() -> Result<PCM, Box<dyn std::error::Error>> {
    use alsa::pcm::{HwParams, Format, Access};
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    let pcm = PCM::new("default", Direction::Playback, false)?;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    {
        let hwp = HwParams::any(&pcm)?;
        hwp.set_channels(2)?; // –°—Ç–µ—Ä–µ–æ
        hwp.set_rate(44100, alsa::ValueOr::Nearest)?; // 44.1 –∫–ì—Ü
        hwp.set_format(Format::float())?; // 32-bit float
        hwp.set_access(Access::RWInterleaved)?;
        hwp.set_buffer_size_near(1024)?; // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        pcm.hw_params(&hwp)?;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    {
        let hwp = pcm.hw_params_current()?;
        let swp = pcm.sw_params_current()?;
        swp.set_start_threshold(hwp.get_buffer_size()? - hwp.get_period_size()?)?;
        pcm.sw_params(&swp)?;
    }
    
    Ok(pcm)
}

/// Linux-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É–¥–∏–æ
pub mod linux_audio_utils {
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º Linux
    pub fn check_audio_systems() -> Vec<String> {
        let mut systems = Vec::new();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ALSA
        #[cfg(target_os = "linux")]
        {
            if std::path::Path::new("/proc/asound").exists() {
                systems.push("ALSA".to_string());
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º PulseAudio
        if std::process::Command::new("pulseaudio")
            .arg("--check")
            .output()
            .map(|output| output.status.success())
            .unwrap_or(false)
        {
            systems.push("PulseAudio".to_string());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JACK
        if std::process::Command::new("jack_control")
            .arg("status")
            .output()
            .map(|output| output.status.success())
            .unwrap_or(false)
        {
            systems.push("JACK".to_string());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º PipeWire
        if std::process::Command::new("pipewire")
            .arg("--version")
            .output()
            .map(|output| output.status.success())
            .unwrap_or(false)
        {
            systems.push("PipeWire".to_string());
        }
        
        systems
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    pub fn get_system_info() -> String {
        let audio_systems = check_audio_systems();
        format!(
            "Linux –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã: {}",
            if audio_systems.is_empty() {
                "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã".to_string()
            } else {
                audio_systems.join(", ")
            }
        )
    }
    
    /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Linux
    pub fn optimization_tips() -> Vec<String> {
        vec![
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PREEMPT_RT —è–¥—Ä–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏".to_string(),
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é rtprio".to_string(),
            "–û—Ç–∫–ª—é—á–∏—Ç–µ CPU frequency scaling –¥–ª—è –∞—É–¥–∏–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π".to_string(),
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JACK –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏".to_string(),
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ udev –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º".to_string(),
        ]
    }
}