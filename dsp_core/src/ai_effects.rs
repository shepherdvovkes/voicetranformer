// AI —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π NPU
use std::sync::atomic::AtomicBool;
use std::collections::VecDeque;

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
#[derive(Debug, Clone)]
pub struct AIProcessingResult {
    pub output: Vec<f32>,
    pub latency_ms: f32,
    pub npu_utilization: f32,
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
#[derive(Debug, Clone)]
pub struct AIConfig {
    pub sample_rate: f32,
    pub buffer_size: usize,
    pub model_path: Option<String>,
    pub use_npu: bool,
    pub processing_mode: AIProcessingMode,
}

#[derive(Debug, Clone)]
pub enum AIProcessingMode {
    RealTime,     // –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    HighQuality,  // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    Balanced,     // –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
}

/// –ì–ª–∞–≤–Ω—ã–π AI –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
pub struct AIProcessor {
    config: AIConfig,
    is_processing: AtomicBool,
    buffer_queue: VecDeque<Vec<f32>>,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    pub processing_time_history: VecDeque<f32>,
    pub npu_load_history: VecDeque<f32>,
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    #[cfg(all(target_os = "macos", target_arch = "aarch64"))]
    core_ml_processor: Option<CoreMLVoiceProcessor>,
    
    // Fallback CPU –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    cpu_processor: CPUVoiceProcessor,
}

impl AIProcessor {
    pub fn new(config: AIConfig) -> Self {
        Self {
            config: config.clone(),
            is_processing: AtomicBool::new(false),
            buffer_queue: VecDeque::new(),
            processing_time_history: VecDeque::new(),
            npu_load_history: VecDeque::new(),
            
            #[cfg(all(target_os = "macos", target_arch = "aarch64"))]
            core_ml_processor: CoreMLVoiceProcessor::new(&config).ok(),
            
            cpu_processor: CPUVoiceProcessor::new(&config),
        }
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ NPU –∏–ª–∏ CPU
    pub fn process(&mut self, input: &[f32]) -> AIProcessingResult {
        let start_time = std::time::Instant::now();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NPU –Ω–∞ Apple Silicon
        #[cfg(all(target_os = "macos", target_arch = "aarch64"))]
        if self.config.use_npu {
            if let Some(ref mut core_ml) = self.core_ml_processor {
                match core_ml.process(input) {
                    Ok(result) => {
                        let processing_time = start_time.elapsed().as_secs_f32() * 1000.0;
                        self.update_stats(processing_time, result.npu_utilization);
                        return result;
                    }
                    Err(e) => {
                        println!("‚ö†Ô∏è NPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU: {}", e);
                    }
                }
            }
        }
        
        // Fallback –Ω–∞ CPU
        let result = self.cpu_processor.process(input);
        let processing_time = start_time.elapsed().as_secs_f32() * 1000.0;
        self.update_stats(processing_time, 0.0); // CPU –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NPU
        
        result
    }
    
    fn update_stats(&mut self, processing_time: f32, npu_load: f32) {
        self.processing_time_history.push_back(processing_time);
        self.npu_load_history.push_back(npu_load);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        if self.processing_time_history.len() > 100 {
            self.processing_time_history.pop_front();
        }
        if self.npu_load_history.len() > 100 {
            self.npu_load_history.pop_front();
        }
    }
    
    pub fn get_average_latency(&self) -> f32 {
        if self.processing_time_history.is_empty() {
            return 0.0;
        }
        self.processing_time_history.iter().sum::<f32>() / self.processing_time_history.len() as f32
    }
    
    pub fn get_average_npu_load(&self) -> f32 {
        if self.npu_load_history.is_empty() {
            return 0.0;
        }
        self.npu_load_history.iter().sum::<f32>() / self.npu_load_history.len() as f32
    }
    
    pub fn supports_npu(&self) -> bool {
        #[cfg(all(target_os = "macos", target_arch = "aarch64"))]
        {
            self.core_ml_processor.is_some()
        }
        #[cfg(not(all(target_os = "macos", target_arch = "aarch64")))]
        {
            false
        }
    }
}

/// Core ML –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è Apple Silicon
#[cfg(all(target_os = "macos", target_arch = "aarch64"))]
pub struct CoreMLVoiceProcessor {
    config: AIConfig,
    model_loaded: bool,
    frame_buffer: Vec<f32>,
}

#[cfg(all(target_os = "macos", target_arch = "aarch64"))]
impl CoreMLVoiceProcessor {
    pub fn new(config: &AIConfig) -> Result<Self, String> {
        println!("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Core ML –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ Apple Silicon...");
        
        let mut processor = Self {
            config: config.clone(),
            model_loaded: false,
            frame_buffer: Vec::new(),
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (–ø–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è)
        processor.load_model()?;
        
        Ok(processor)
    }
    
    fn load_model(&mut self) -> Result<(), String> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ .mlmodel —Ñ–∞–π–ª–∞
        println!("üì± –ó–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –Ω–∞ Neural Engine...");
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        std::thread::sleep(std::time::Duration::from_millis(100));
        
        self.model_loaded = true;
        println!("‚úÖ Core ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        Ok(())
    }
    
    pub fn process(&mut self, input: &[f32]) -> Result<AIProcessingResult, String> {
        if !self.model_loaded {
            return Err("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞".to_string());
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
        self.frame_buffer.extend_from_slice(input);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        let frame_size = 1024; // –†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if self.frame_buffer.len() >= frame_size {
            let frame: Vec<f32> = self.frame_buffer.drain(..frame_size).collect();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é AI –æ–±—Ä–∞–±–æ—Ç–∫—É
            let processed = self.apply_neural_voice_transformation(&frame);
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ NPU (20-80% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
            let npu_utilization = match self.config.processing_mode {
                AIProcessingMode::RealTime => 20.0,
                AIProcessingMode::Balanced => 50.0,
                AIProcessingMode::HighQuality => 80.0,
            };
            
            Ok(AIProcessingResult {
                output: processed,
                latency_ms: 5.0, // NPU –æ–±—ã—á–Ω–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π
                npu_utilization,
            })
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            Ok(AIProcessingResult {
                output: input.to_vec(),
                latency_ms: 0.1,
                npu_utilization: 5.0, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
            })
        }
    }
    
    fn apply_neural_voice_transformation(&self, input: &[f32]) -> Vec<f32> {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è Core ML –æ–±—Ä–∞–±–æ—Ç–∫–∞
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π AI
        let mut output = Vec::with_capacity(input.len());
        
        for (i, &sample) in input.iter().enumerate() {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª–æ–∂–Ω—É—é –Ω–µ–ª–∏–Ω–µ–π–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            let phase = i as f32 * 0.001;
            let modulated = sample * (1.0 + 0.3 * (phase * 17.0).sin());
            let harmonics = 0.1 * (phase * 34.0).sin() + 0.05 * (phase * 51.0).sin();
            let transformed = (modulated + harmonics).tanh();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            let filtered = if i > 0 {
                0.7 * transformed + 0.3 * output[i - 1]
            } else {
                transformed
            };
            
            output.push(filtered);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        let max_val = output.iter().map(|x| x.abs()).fold(0.0, f32::max);
        if max_val > 0.0 {
            for sample in &mut output {
                *sample /= max_val * 1.1; // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            }
        }
        
        output
    }
}

/// CPU –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–∫ fallback
pub struct CPUVoiceProcessor {
    config: AIConfig,
    frame_buffer: Vec<f32>,
    filter_state: Vec<f32>,
}

impl CPUVoiceProcessor {
    pub fn new(config: &AIConfig) -> Self {
        Self {
            config: config.clone(),
            frame_buffer: Vec::new(),
            filter_state: vec![0.0; 8], // 8 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
        }
    }
    
    pub fn process(&mut self, input: &[f32]) -> AIProcessingResult {
        // CPU –æ–±—Ä–∞–±–æ—Ç–∫–∞: –º–µ–Ω–µ–µ —Å–ª–æ–∂–Ω–∞—è, –Ω–æ –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è
        let mut output = Vec::with_capacity(input.len());
        
        for (i, &sample) in input.iter().enumerate() {
            // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è AI —ç—Ñ—Ñ–µ–∫—Ç–∞
            let pitch_mod = (i as f32 * 0.01).sin() * 0.2;
            let processed = (sample * (1.0 + pitch_mod)).tanh() * 0.8;
            output.push(processed);
        }
        
        AIProcessingResult {
            output,
            latency_ms: 15.0, // CPU –º–µ–¥–ª–µ–Ω–Ω–µ–µ NPU
            npu_utilization: 0.0, // NPU –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }
    }
}

impl Default for AIConfig {
    fn default() -> Self {
        Self {
            sample_rate: 44100.0,
            buffer_size: 512,
            model_path: None,
            use_npu: true,
            processing_mode: AIProcessingMode::Balanced,
        }
    }
}