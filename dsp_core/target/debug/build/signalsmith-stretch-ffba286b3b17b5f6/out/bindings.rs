/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct signalsmith_stretch {
    _unused: [u8; 0],
}
pub type signalsmith_stretch_t = signalsmith_stretch;
extern "C" {
    pub fn signalsmith_stretch_create(
        channel_count: ::std::os::raw::c_int,
        block_length: usize,
        interval: usize,
    ) -> *mut signalsmith_stretch_t;
}
extern "C" {
    pub fn signalsmith_stretch_create_preset_default(
        channel_count: ::std::os::raw::c_int,
        sample_rate: f32,
    ) -> *mut signalsmith_stretch_t;
}
extern "C" {
    pub fn signalsmith_stretch_create_preset_cheaper(
        channel_count: ::std::os::raw::c_int,
        sample_rate: f32,
    ) -> *mut signalsmith_stretch_t;
}
extern "C" {
    pub fn signalsmith_stretch_destroy(handle: *mut signalsmith_stretch_t);
}
extern "C" {
    pub fn signalsmith_stretch_reset(handle: *mut signalsmith_stretch_t);
}
extern "C" {
    pub fn signalsmith_stretch_input_latency(handle: *mut signalsmith_stretch_t) -> usize;
}
extern "C" {
    pub fn signalsmith_stretch_output_latency(handle: *mut signalsmith_stretch_t) -> usize;
}
extern "C" {
    pub fn signalsmith_stretch_seek(
        handle: *mut signalsmith_stretch_t,
        input: *mut f32,
        input_length: usize,
        playback_rate: f64,
    );
}
extern "C" {
    pub fn signalsmith_stretch_set_transpose_factor(
        handle: *mut signalsmith_stretch_t,
        multiplier: f32,
        tonality_limit: f32,
    );
}
extern "C" {
    pub fn signalsmith_stretch_set_transpose_factor_semitones(
        handle: *mut signalsmith_stretch_t,
        multiplier: f32,
        tonality_limit: f32,
    );
}
extern "C" {
    pub fn signalsmith_stretch_process(
        handle: *mut signalsmith_stretch_t,
        input: *mut f32,
        input_length: usize,
        output: *mut f32,
        output_length: usize,
    );
}
extern "C" {
    pub fn signalsmith_stretch_flush(
        handle: *mut signalsmith_stretch_t,
        output: *mut f32,
        output_length: usize,
    );
}
